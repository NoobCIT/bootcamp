<!DOCTYPE html>
<html land='eng'>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0' />
    <title>Curriculum</title>
    <%- include('../../partials/fonts') %>
    <link rel="stylesheet" href="/css/prism.css">
    <link rel="stylesheet" href="/css/styles.css">
  </head>
  <body>
    <%- include('../../partials/header') %>
    <div class="course-heading">
      Course 2: GDScript Programming Basics
    </div>
      <div class="course-section">
        <div>Basic Programming Skills</div>
          <p>
            It's now time to really start diving into the heavy programming stuff!  I have to admit that this course is getting to be a little on the dryer side of things.  We won't be making any games here.  It's just pure programming.  It is important that you have a basic foundation of programming skills.  You should be able to declare variables, store data in arrays, and manipulate them and write a function for what is it that you need to do.  These all should be second nature.
          </p>
      </div>
      <div class="course-section">
        <div>Philosophy and Tips</div>
          <ol>
            <li>
              Learn to read documentation.  What most people don't know about programming, is that you read a lot of documentation.  Every piece of tech you use has documentation.
            </li>
            <li>
              Don't know how to do something?  Google.  You will spend a lot of time googling how to do things.  Honestly, it's part of the profession.  There's so much to know now a days that someone out there probably has had the same questions or problems as you.  The answer is out there.  Be the Google Master.
            </li>
            <li>
              Can't remember what you learned or exactly what a built-in function does?  Anki it!  Anything you can't remember or think would be worth solidifying in your head, just make a flash card in Anki.  Run through those set of cards everyday and you'll be amazed how helpful it is.  You'll also get to see how far you've come on this coding journey, because you'll soon have a huge stack of flash cards.
            </li>
            <li>
              Like with anything, practice makes perfect.  At first you'll be like how does anyone remember all this?  It's going to seem like you don't what you are doing at first or you're relying too much on looking everything up.  But that's normal.  It's the nature of the field.  Learn to accept it.  You'll get there with time.
            </li>
          </ol>
      </div>
      <div class="course-section">
        <div>Warm-Up Assigment</div>
        <ol>
          <li>Start up Godot and create a new folder and file.  When the editor finishes opening, click the Script button near the top center of the screen.</li>
          <img class="screenshots" src="../../images/Step1.png" />
          <li>Go to File > New Script.</li>
          <img class="screenshots" src="../../images/Step2.png" />
          <li> Specify a file name.  In this case, I used Practice.gd, but it's your choice.  Hit load when you are done.</li>
          <img class="screenshots" src="../../images/Step3.png" />
          <li>Your screen should look something like this now:</li>
          <img class="screenshots" src="../../images/Step4.png" />
        </ol>
        <p>
          Surprise... it's DOCUMENTATION TIME!  Read through the EditorScript documentation.  It's basically a part of Godot that lets you code plug-ins or extensions to your game.  It's also a useful area for you to play around with code.  Based on on the reading, try to get your computer to print out "Hello from the Godot Editor!"  Move onto the assignment when you are done.  <i>Hint: if you run the program, and aren't seeing the output, make sure to click output near the bottom of the editor.</i>
        </p>
      </div>
      <div class="course-section">
        <div>Assignment</div>
        <p>
          Read through the documenation on GDScript basics and complete the coding tasks along the way to test your understanding.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://docs.godotengine.org/en/3.1/getting_started/scripting/gdscript/gdscript_basics.html#doc-gdscript">GDScript Basics</a>
          </li>
        </ul>
        <ol>
          <li>
            Read Introduction to Example of GDScript
          </li>
          <li>
            Read Language to Comments
          </li>
            <ol type="a">
              <li>
                Declare the member variables a, s, arr from the reading into your program and try to get them to print in the output.
              </li>
              <li>
                There is a lot of information here.  Some keywords and operators will be more obvious than others.  You don't need to memorize all of them, but with time, you'll definitely get a good grasp on a good chunk of them through learning.  Again, if you're not sure about something, you can always look it up here or google!
              </li>
              <li>
                Lets write a new function that adds 2 numbers.  See the below code for guidance.  You can name the function whatever you'd like, in this case, I named it <i>add</i>.  The function takes in 2 parameters (inputs).
                <pre class="language-gdscript line-numbers">
                  <code>
func add(num1, num2):
  num1 + num2
                  </code></pre>
                Lets try to call the function in run:
                <pre class="language-gdscript line-numbers">
                  <code>
func _run():
  print(add(2, 3))
                  </code></pre>
                  Did you get the answer 5?  Hopefully not!  The output should show <i>Null</i> which basically means <i>nothing</i>.  What could be the issue here?  Well, it turns out the issue is that we did not <b>return</b> the value from our add function.  This is very important to remember, if you need to use the result of a function somewhere within your code, make sure to return the value:
                <pre class="language-gdscript line-numbers">
                  <code>
func add(num1, num2):
  return num1 + num2
                  </code></pre>
                  You should now get the correct answer which is 5.
              </li>
              <li>
                Write functions using * (Multiplication), / (Division), % (Remainder).
              </li>
              <li>
                Write functions using <, >, ==, !=, >= <=.
              </li>
              <li>
                Write a single line and block comment.
              </li>
            </ol>
          <li>
            Read Built-in types to Container built-in types
            <ol type="a">
              <li>
                Using the given array, answer the following questions.  Try to come up with answer in your head before checking your answer with code.
                <pre class="language-gdscript line-numbers">
                  <code>
var my_array = ["hello", 0, 3, 8, "bye", 100]
# 1 Give two ways to select "bye", hint: one way uses a negative sign.
# 2 What does .size() do?
# 3 What does my_array.size() return?
# 4 What does my_array[1] + my_array[6] return?
# 5 What does my_array[0] + my_array[4] return?
                  </code></pre>
              </li>
              <li>
                Create a dictionary.
                <pre class="language-gdscript line-numbers">
                  <code>
var your_dictionary = {} # Empty dictionary
# 1 Add the value "first" with the key "key1"
# 2 Add the value 2 with the key "key2"
# 3 Add the value 789 with the key 3
# 4 Add the value "hello" with the key "4"
# 5 Add the value [2, 4, 6] with the key "random"
# 6 Add the value " " with the key "space"
# 7 Add the value "there" with the key 1000
# 8 What will print(your_dictionary) return?
# 9 What will your_dictionary["key1"] return?
# 10 What will your_dictionary[3] return?
# 11 What will your_dictionary["4"] + your_dictionary["space"] + your_dictionary[1000] return?
# 12 Does lowercase or uppercase matter?  Try it out on one of the keys!
                  </code></pre>
              </li>
              <li>
                What is wrong with this dictionary?
                <pre class="language-gdscript line-numbers">
                  <code>
var his_dictionary = {
  firstKey = 1,
  "secondKey" = 12,
  thirdkey = "123",
  2 = 3
  }
                  </code></pre>
              </li>
            </ol>
          </li>
          <li>
            Read Data to Enums
          </li>
          <ol type="a">
            <li>
              Be comfortable with declaring variables.  There will be a lot of variables no matter how big or small your game is.
            </li>
          </ol>
          <li>
            Read Functions to Static Functions
          </li>
          <ol type="a">
            <li>
              What does first class objects means?  Hint: This is one of the main features of JavaScript.
            </li>
            <li>
              When you run this, what will print?
              <pre class="language-gdscript line-numbers">
                <code>
func eat(a = 120):
  print(a)

func _run():
  print(eat())
  print(eat(1337))
                </code></pre>
            </li>
            <li>
              When you run this, what will print?
              <pre class="language-gdscript line-numbers">
                <code>
func eat(a := 120):
  print(a)

func _run():
  print(eat("hello"))
                </code></pre>
            </li>
            <li>
              When you run this, what will print?
              <pre class="language-gdscript line-numbers">
                <code>
func eat(a := 120):
  print(a)

func _run():
  print(eat(1337))
                </code></pre>
            </li>
            <li>
              When you run this, what will print?
              <pre class="language-gdscript line-numbers">
                <code>
# Within a file called script1.gd
static func drink(some_parameter):
  print(some_parameter)

# Within a file called script2.gd
var my_drink = preload("res://script1.gd")

func _run():
  my_drink.drink("coke")
                </code></pre>
            </li>
            <li>
              When you run this, what will print?
              <pre class="language-gdscript line-numbers">
                <code>
# Within a file called script1.gd
var a = "sprite" # member variable
static func drink():
  print(a)

# Within a file called script2.gd
  var my_drink = preload("res://script1.gd")

func _run():
  my_drink.drink()
                </code></pre>
            </li>
          </ol>
          <li>
            Read Statements and Control Flow to Multipatterns
          </li>
          <ol type="a">
            <li>
              There is a lot of stuff in here.  But just knowing your if else and while/for loop statements will take you a long way.  You'll have plenty of practice through exercises and projects.
            </li>
          </ol>
          <li>
            Read Classes to Classes as Resources
          </li>
          <ol type="a">
            <li>
              Just know that you're going to have a lot of different classes.  They are used to hold properties and group things together.  For example a class Bird has the function fly.  You decide to make a Pigeon class.  The Pigeon class can extend from Bird, meaning Pigeon inherit all properties/functionality from the Bird class.  You don't need to write a separate fly function for Pigeon, because it can just take the already written fly function in Bird.
            </li>
          </ol>
          <li>
            Read Exports to Exporting Arrays
          </li>
          <ol type="a">
            <li>
              You will be using this a lot.  The main idea is the items you export will be made available in the Godot Editor where you can actually click and change the value.  It's a pretty cool feature that will get used over and over.
            </li>
          </ol>
          <li>
            Read Setters/getters to Memory Management
          </li>
          <ol type="a">
            <li>
              You can code how ever you want, but know that things will get complicated the bigger the code base gets.  In general, it's good practice to use setters and getters to help control how data is manipulated.  It's easier to track variables/values and know exactly where they change and how to retrieve them to be used elsewhere.
            </li>
          </ol>
          <li>
            Read Signals to Assert Keyword
          </li>
          <ol type="a">
            <li>
              Phew... you are finally at the end of the basics.  This last run is a lot to take in.  Don't worry if a lot of it sounds foreign to you.  Read and try to digest it as best you can.  It helps to have some background information when you actually use these throughout real projects.
            </li>
          </ol>
        </ol>
      </div>
    </div>
    <%- include('../../partials/footer') %>
  </body>
  <script src="../../../js/prism.js"></script>
</html>
